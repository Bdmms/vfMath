#include "../include/vfMath/Perlin.hpp"
#include "../include/vfMath/AdvancedMath.hpp"

unsigned char PERMUTATIONS[] = { 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36,
                      103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0,
                      26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56,
                      87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
                      77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55,
                      46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132,
                      187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109,
                      198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126,
                      255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183,
                      170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
                      172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112,
                      104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162,
                      241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106,
                      157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,
                      93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180 };

vec2f randomGradient(const vec2i ip)
{
    const unsigned w = 8 * sizeof(unsigned);
    const unsigned s = w / 2;
    unsigned a = ip.x;
    unsigned b = ip.y;

    a *= 3284157443; 
    b ^= (a << s) | (a >> (w - s));
    b *= 1911520717; 
    a ^= (b << s) | (b >> (w - s));
    a *= 2048419325;
    float random = a * (3.14159265f / ~(~0u >> 1));

    return vec2f{ sinf(random), cosf(random) };
}

float grad2D(const vec2i ip, const vec2f point)
{
    return Math::dot(randomGradient(ip), point - (vec2f)ip);
}

float Perlin::perlin2D(const vec2f point)
{
    vec2i ip = (vec2i)point;
    vec2f s = point - (vec2f)ip;

    vec2f n0 = { grad2D(ip,                 point), grad2D(ip + vec2i{ 0, 1 }, point) };
    vec2f n1 = { grad2D(ip + vec2i{ 1, 0 }, point), grad2D(ip + vec2i{ 1, 1 }, point) };
    vec2f i = Math::lerp(n0, n1, s.x);

    return (i.y - i.x) * s.y + i.x;
}